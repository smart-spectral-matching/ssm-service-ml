name: Test

on:
  push:
  pull_request:
    types: [opened, synchronize]

jobs:
  code-checks:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8]
      fail-fast: false

    steps:
      - 
        name: Checkout
        uses: actions/checkout@v3
      - 
        name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - 
        name: Get full python version
        id: full-python-version
        run: python -c "import sys; print('-'.join(str(v) for v in sys.version_info))"
      - 
        name: Install poetry
        run: |
          curl -sSL https://install.python-poetry.org | python -
          echo "PATH=$HOME/.local/bin:$PATH" >> $GITHUB_ENV
      - 
        name: Configure poetry
        run: poetry config virtualenvs.in-project true
      - 
        name: Set up cache
        uses: actions/cache@v3
        id: cache
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('**/poetry.lock') }}
      - 
        name: Ensure cache is healthy
        if: steps.cache.outputs.cache-hit == 'true'
        run: poetry run pip --version >/dev/null 2>&1 || rm -rf .venv
      - 
        name: Install Dependencies
        run: poetry install
      - 
        name: Build database container image
        run: |
            cd Database
            docker build -t ssm-service-ml-db .
      - 
        name: Integration Tests
        run: |
            docker run -d \
                --env POSTGRES_DB=ssm \
                --env POSTGRES_PASSWORD=password \
                --publish 5432:5432 \
                --ip 172.17.0.2 \
                --name ssmdb \
                ssm-service-ml-db
            poetry run pytest ./tests
            docker stop ssmdb
            docker rm ssmdb

  publish-container-image:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}
    needs: [code-checks]
    steps:
      -
        name: Checkout
        uses: actions/checkout@v3
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      -
        name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      -
        name: Build and push database to local registry
        uses: docker/build-push-action@v4
        with:
          context: Database
          push: true 
          platforms: linux/amd64,linux/arm64
          tags: ghcr.io/smart-spectral-matching/ssm-service-ml-db:${{ github.ref_name }}-${{github.sha}}
      -
        name: Build and push jupyterhub to local registry
        uses: docker/build-push-action@v4
        with:
          context: .
          file: jupyterhub/Dockerfile 
          push: true 
          platforms: linux/amd64,linux/arm64
          tags: ghcr.io/smart-spectral-matching/ssm-service-ml-jupyterhub:${{ github.ref_name }}-${{github.sha}}
